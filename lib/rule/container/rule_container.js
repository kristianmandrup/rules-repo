// Generated by LiveScript 1.2.0
(function(){
  var util, Debugger, RuleMatcher, RuleCleaner, RuleRegistrator, RuleContainer;
  util = require('../../util');
  Debugger = util.Debugger;
  RuleMatcher = require('./matcher/rule_matcher');
  RuleCleaner = require('./rule_cleaner');
  RuleRegistrator = require('./rule_registrator');
  module.exports = RuleContainer = (function(){
    RuleContainer.displayName = 'RuleContainer';
    var prototype = RuleContainer.prototype, constructor = RuleContainer;
    importAll$(prototype, arguments[0]);
    function RuleContainer(options, debugging){
      this.options = options != null
        ? options
        : {};
      this.debugging = debugging != null ? debugging : false;
      this.configure();
      this;
    }
    prototype._type = 'RuleContainer';
    prototype.can = {};
    prototype.cannot = {};
    prototype.configure = function(){
      this.matcherClass = this.options.matcher || RuleMatcher;
      this.registratorClass = this.options.registrator || RuleRegistrator;
      return this.cleanerClass = this.options.cleaner || RuleCleaner;
    };
    prototype.register = function(act, actions, subjects){
      this.debug('container register', act, actions, subjects);
      return this.registrator().register(act, actions, subjects);
    };
    prototype.match = function(act, accessRequest){
      return this.matcher(act, accessRequest).match();
    };
    prototype.clean = function(act){
      this.cleaner().clean(act);
      return this;
    };
    prototype.matcher = function(act, accessRequest){
      return new this.matcherClass(this, act, accessRequest);
    };
    prototype.cleaner = function(){
      return this._cleaner || (this._cleaner = new this.cleanerClass(this));
    };
    prototype.registrator = function(){
      return this._registrator || (this._registrator = new this.registratorClass(this, this.debugging));
    };
    prototype.display = function(){
      console.log("can-rules:", this.can);
      console.log("cannot-rules:", this.cannot);
      return this;
    };
    return RuleContainer;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
